// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

import "time"

type AnalyticsOverviewResp struct {
	OrderCount        TimeSeries              `json:"orderCount"`
	OrderAmount       TimeSeries              `json:"orderAmount"`
	VehicleUtil       TimeSeries              `json:"vehicleUtil"`
	DeliveryEff       TimeSeries              `json:"deliveryEff"`
	EfficiencyCompare EfficiencyCompareSeries `json:"efficiencyCompare"`
	Ratings           RatingsSeries           `json:"ratings"`
	Complaints        TimeSeries              `json:"complaints"`
}

type AnalyticsReq struct {
	StartDate   string `json:"startDate"`            // 可选，格式 yyyy-mm-dd 或 RFC3339
	EndDate     string `json:"endDate"`              // 可选
	GroupBy     string `json:"groupBy"`              // 可选：day|week|month
	RangeDays   int    `json:"rangeDays,optional"`   // 可选，优先级低于 start/end
	Region      string `json:"region,optional"`      // 可选：按区域过滤
	VehicleType string `json:"vehicleType,optional"` // 可选：按车型过滤
}

type EfficiencyCompareSeries struct {
	Dates    []string  `json:"dates"`
	SmallVan []float64 `json:"smallVan"`
	LargeVan []float64 `json:"largeVan"`
}

type FixedHeader struct {
	StartByte    byte   `json:"startByte"`    // 标识位：固定为 0xF2
	DataLength   uint32 `json:"dataLength"`   // 数据段长度：[0..4294967296]，表示当前报文中数据段内容所占字节数，单位：字节，最多描述 4GB 数据
	DataCategory byte   `json:"dataCategory"` // 数据类别：[0.255]，表示不同的数据类别，其定义应符合附录 A 表 A.2 的要求
	Version      byte   `json:"version"`      // 版本号：[0.255]，同一数据类别的不同版本号标识不同的数据集
	Timestamp    uint64 `json:"timestamp"`    // 时间戳：发送端采集数据时刻的 UTC 时间戳（东八区），单位：毫秒，如采集多项数据时刻不同可取一个平均时刻
	Control      byte   `json:"control"`      // 控制内容：包括报文优先级与加密方式两个部分
}

type OnlineCountResp struct {
	Count int `json:"count"`
}

type Position struct {
	Longitude uint32 `json:"longitude"` // 经度: [0..3600000000]，单位：1e-7°，数据偏移量 180，表示-180.0000000°～180.0000000°，大于 0 表示东经，不可缺省，0xFFFFFFFF 表示异常
	Latitude  uint32 `json:"latitude"`  // 纬度: [0..1800000000]，单位：1e-7°，数据偏移量 90，表示-90.0000000°～90.0000000°，大于 0 表示北纬，不可缺省，0xFFFFFFFF 表示异常
	Elevation uint32 `json:"elevation"` // 海拔高度: [0..70000]，单位：dm，数据偏移量5000，表示-5000 dm～65000 dm，0xFFFFFFFF表示缺省
}

type Position2D struct {
	Longitude uint32 `json:"longitude"` // 经度: 与 Position.Longitude 相同的表示，单位 1e-7°，数据偏移量 180，0xFFFFFFFF 表示异常或缺省
	Latitude  uint32 `json:"latitude"`  // 纬度: 与 Position.Latitude 相同的表示，单位 1e-7°，数据偏移量 90，0xFFFFFFFF 表示异常或缺省
}

type PositionPoint struct {
	Timestamp string `json:"timestamp"` // RFC3339 UTC timestamp
	Longitude uint32 `json:"longitude"`
	Latitude  uint32 `json:"latitude"`
}

type RatingsSeries struct {
	Dates []string `json:"dates"`
	Good  []int    `json:"good"`
	Mid   []int    `json:"mid"`
	Bad   []int    `json:"bad"`
}

type TimeSeries struct {
	Dates  []string  `json:"dates"`
	Values []float64 `json:"values"`
	Total  float64   `json:"total"`
}

type TrajectoryReq struct {
	VehicleId string `json:"vehicleId"` // 必填
	StartUtc  string `json:"startUtc"`  // RFC3339 UTC 时间戳，例如 2006-01-02T15:04:05Z
	EndUtc    string `json:"endUtc"`    // RFC3339 UTC 时间戳
}

type TrajectoryResp struct {
	Trajectory []PositionPoint `json:"trajectory"`
}

// 车辆相关 API 类型
type VehicleInfo struct {
	Id           string `json:"id"`
	PlateNumber 	string `json:"plateNumber"`
	Type        	string `json:"type"`
	TotalCapacity	string `json:"TotalCapacity"`
	Battery	     string `json:"battery"`
	Route   	    string `json:"route"`
	Speed       	string `json:"speed"`
	Lng       		int64  `json:"lng"`    // 经度：乘以 1e7，遵循 Position 编码
	Lat       		int64  `json:"lat"`    // 纬度：乘以 1e7，遵循 Position 编码
	Status    		string `json:"status"`
	CreatedAt 		string `json:"createdAt"` // RFC3339 UTC 时间
	UpdatedAt 		string `json:"updatedAt"` // RFC3339 UTC 时间
}

type VehicleListResp struct {
	Vehicles []VehicleInfo `json:"vehicles"`
}

// CreateVehicleReq 表示创建车辆静态信息的请求体
type CreateVehicleReq struct {
	VehicleId     string `json:"vehicleId"`     // 车辆唯一 ID
	PlateNumber   string `json:"plateNumber"`   // 车牌号
	Type          string `json:"type"`          // 车型
	TotalCapacity string `json:"totalCapacity"` // 车辆总容量（可为字符串描述）
	BatteryInfo   string `json:"batteryInfo"`   // 电池信息（电量/型号等）
	RouteId       string `json:"routeId"`       // 所属线路编号
	Status        string `json:"status"`        // 车辆状态（空闲/配送中/充电中/异常等）
	Extra         string `json:"extra,optional"`// 可选扩展字段（JSON 字符串）
}

// UpdateVehicleReq 表示更新车辆信息的请求体（vehicleId 为必填）
type UpdateVehicleReq struct {
	VehicleId     string `json:"vehicleId"`     // 车辆唯一 ID（必填）
	PlateNumber   *string `json:"plateNumber,optional"`   // 车牌号，指针表示可选
	Type          *string `json:"type,optional"`          // 车型
	TotalCapacity *string `json:"totalCapacity,optional"` // 总容量
	BatteryInfo   *string `json:"batteryInfo,optional"`   // 电池信息
	RouteId       *string `json:"routeId,optional"`       // 所属线路
	Status        *string `json:"status,optional"`        // 状态
	Extra         *string `json:"extra,optional"`// 可选扩展字段（JSON 字符串）
}

// VehicleDetailResp 表示单辆车的详情响应
type VehicleDetailResp struct {
	Vehicle VehicleInfo        `json:"vehicle"`
	Extra   map[string]string  `json:"extra,omitempty"`
}

type VehicleSummaryResp struct {
	Total    int `json:"total"`
	InTransit int `json:"inTransit"`
	Idle     int `json:"idle"`
	Charging int `json:"charging"`
	Abnormal int `json:"abnormal"`
}

// TaskRecord 表示一次车辆任务（从起点到终点）的记录，持久化到关系型数据库以便留痕
type TaskRecord struct {
	ID        int64     `json:"id" db:"id"`
	VehicleId string    `json:"vehicleId" db:"vehicle_id"`
	TaskId    string    `json:"taskId" db:"task_id"`
	StartTime time.Time `json:"startTime" db:"start_time"`
	EndTime   time.Time `json:"endTime" db:"end_time"`
	StartLon  uint32    `json:"startLon" db:"start_lon"`
	StartLat  uint32    `json:"startLat" db:"start_lat"`
	EndLon    uint32    `json:"endLon" db:"end_lon"`
	EndLat    uint32    `json:"endLat" db:"end_lat"`
	Status    string    `json:"status" db:"status"` // e.g. completed/aborted
	CreatedAt time.Time `json:"createdAt" db:"created_at"`
}

type VEH2CLOUD_STATE struct {
	VehicleId       string       `json:"vehicleId"`       // 车辆编号：长度 8 个字符，需在云端平台登记，不可缺省
	MessageId       []byte       `json:"messageId"`       // 消息编号：车端维护的车辆状态信息编号，为[0..2^64 -1]间的自增序列，超过2^64 - 1后，重新从 1 开始计数，云端用以确认消息的接收，不可缺省
	TimestampGNSS   uint64       `json:"timestampGNSS"`   // GNSS时间戳: GNSS 数据中的时间戳，单位：ms，需要进行转换为东八区 UTC 时间戳，不可缺省，0xFFFFFFFFFFFFFFFF 表示异常
	VelocityGNSS    uint16       `json:"velocityGNSS"`    // GNSS 速度: [0..20000]，GNSS 数据中的行驶速度，单位：0.01 m/s，不可缺省，0xFFFF 表示异常
	Position        Position     `json:"position"`        // 位置: 车辆的经纬度及高程信息
	Heading         uint32       `json:"heading"`         // 航向角: [0..3600000]，正北方向顺时针旋转至与车辆当前运动方向重合所转过的角度，单位为 1e-4°，不可缺省，0xFFFFFFFF 表示异常
	TapPos          byte         `json:"tapPos"`          // 档位: 枚举类型：[0..50]，0：数据失效；1-20：表示手动档车辆前进档对应档位；21-30：表示手动挡车辆倒档对应档位；31：D档；32：R档；33：P档；34：N档；35：S档；36：L档；37：H档；38；HL 档；39-50：预留，不可缺省，0xFF 表示异常
	SteeringAngle   uint32       `json:"steeringAngle"`   // 方向盘转角：[0..20000000],方向盘转角，单位：1e-4°，数据偏移量 1000，表示-1000.0000°～1000.0000°,左正右负，0xFFFFFFFF 表示缺省
	Velocity        uint16       `json:"velocity"`        // 总线速度: [0..20000]，CAN 总线数据中的行驶速度，单位：0.01m/s，0xFFFF 表示缺省
	AccelerationLon uint16       `json:"accelerationLon"` // 加速度纵向: [0..20000]，车辆行驶纵向加速度，单位：0.01 m/s^2，数据偏移量100，表示-100.00m/s^2 ～ 100.00m/s^2, 不可缺省，0xFFFF 表示异常
	AccelerationLat uint16       `json:"accelerationLat"` // 横向加速度，同上
	AccelerationVer uint16       `json:"accelerationVer"` // 垂向加速度，同上
	YawRate         uint16       `json:"yawRate"`         // 横摆角速度: [0..20000]，横摆角速度，单位：0.01°/s，数据偏移量 100，顺时针旋转为正，不可缺省，0xFFFF 表示异常
	AccelPos        uint16       `json:"accelPos"`        // 油门开度: [0..1000]，加速踏板开度，单位：0.1%，0xFFFF 表示缺省
	EngineSpeed     uint16       `json:"engineSpeed"`     // 发动机输出转速: [0..20000]，发动机输出转速，单位：r/min，0xFFFF 表示缺省
	EngineTorque    uint32       `json:"engineTorque"`    // 发动机扭矩: [0..500000]，发动机输出扭矩，单位：0.01Nm，0xFFFFFFFF 表示缺省
	BrakeFlag       byte         `json:"brakeFlag"`       // 制动踏板开关：[0..1]，制动踏板是否踩下，0：未踩下，1：踩下，0xFF 表示缺省
	BrakePos        uint16       `json:"brakePos"`        // 制动踏板开度: [0..1000]，制动踏板开度，单位：0.1%，0xFFFF 表示缺省
	BrakePressure   uint16       `json:"brakePressure"`   // 制动主缸压力: [0..50000]，主缸制动压力，单位 0.01MPa,，0xFFFF 表示缺省
	FuelConsumption uint16       `json:"fuelConsumption"` // 油耗: [0..65534]，车辆运行百公里油耗，单位 0.01L/100km，0xFFFF 表示缺省
	DriveMode       byte         `json:"driveMode"`       // 车辆驾驶模式: 枚举类型：[0..9]，1：人工接管（人工驾驶）；2：单车自控（自动驾驶）；3：云端支持下的人工驾驶；4：云端支持下的自动驾驶；5：非主驾位置人工驾驶（不启用）；6：脱离（非自动驾驶行程自动结束下的接管）；7：远程驾驶（非现场人工驾驶）；8：未处于任何驾驶模式；9：其他未定义状态；0xFF 表示缺省
	DestLocation    Position2D   `json:"destLocation"`    // 目的地位置：车辆当前驾驶任务的终点位置，POSITION2D 中经度或纬度为异常值时，表示未获取到目的地位置
	PassPointsNum   byte         `json:"passPointsNum"`   // 途经点数量: [0..255]，0 表示没有途径点，不发送途经点字段，其他取值都均表示
	PassPoints      []Position2D `json:"passPoints"`      // 途经点: N 个途经点，其中 N 为途径点数量
}
